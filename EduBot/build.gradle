/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'John' at '1/7/18 10:12 PM' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
plugins {
    id 'java'
    id 'checkstyle'
    id "jaci.openrio.gradle.GradleRIO" version "2018.03.06"
    id 'org.hidetake.ssh' version "2.9.0"
}

def TEAM = 488
def ROBOT_CLASS = "xbot.edubot.Robot"

deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    
    maven { url "https://mvnrepository.com/artifact/com.google.inject/guice" }
    maven { url "http://first.wpi.edu/FRC/roborio/maven/release"}
    maven { url uri ("../SeriouslyCommonLib/lib/")}
    maven { url "http://www.kauailabs.com/maven2" }
    
   /* 
   flatDir {
       dirs 'lib'
   }*/
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile wpilib()
    compile ctre()
    compile navx()
    compile pathfinder()

    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    
    testCompile 'junit:junit:4.12'
    
    compile group: 'com.google.inject', name: 'guice', version: '4.1.0'
    compile group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.1.0'
    
    compile group: 'log4j', name: 'log4j', version: '1.2.17'
    compile project(':SeriouslyCommonLib')
    
    /*
    compile 'edu.wpi.first.wpiutil:wpiutil-java:3.+'
    compile 'edu.wpi.first.wpilibj:wpilibj-java:+'
    compile 'edu.wpi.first.ntcore:ntcore-java:+'


    compile 'a.b:CTRE_Phoenix:1.0'
    
    compile 'com.kauailabs.navx.frc:navx_frc:+'
    */

    
}

remotes {
    rio {
        host = 'roboRIO-488-frc.local'
        user = 'admin'
        knownHosts = allowAnyHosts
    }
}

task('copyResources') {
    doLast {
        ssh.run {
            session(remotes.rio) {
                // execute 'mkdir ~/449_resources', ignoreError: true
                // execute 'mkdir /488Logs', ignoreError: true
                put from: fileTree('../SeriouslyCommonLib/lib/log4jConfig/log4j.xml'), into: '/home/lvuser/'
                //execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r", ignoreError: true
            }
        }
    }
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}
    
task wrapper(type: Wrapper) {
    gradleVersion = '4.9'
}


task jarSources(type:Jar){
    from sourceSets.main.allSource
    classifier = 'source'
}

checkstyle {
    toolVersion = '8.7'
    configFile = file('../SeriouslyCommonLib/xbotcheckstyle.xml')
}

task checkstyle(type: Checkstyle) {
    source 'src/main/java'
    configProperties.basedir = file('.')
    
    // Empty classpath
    classpath = files()
}
/*
tasks.withType(Test) {
    testLogging.showStandardStreams = true
    
    afterTest { desc, result -> 
        logger.quiet "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
}
*/